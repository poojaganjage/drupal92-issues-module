diff --git a/core/modules/node/src/Plugin/views/argument/Vid.php b/core/modules/node/src/Plugin/views/argument/Vid.php
index ff1c0ac..a61b6a6 100644
--- a/core/modules/node/src/Plugin/views/argument/Vid.php
+++ b/core/modules/node/src/Plugin/views/argument/Vid.php
@@ -14,13 +14,6 @@
  */
 class Vid extends NumericArgument {
 
-  /**
-   * Database Service Object.
-   *
-   * @var \Drupal\Core\Database\Connection
-   */
-  protected $database;
-
   /**
    * The node storage.
    *
@@ -37,15 +30,18 @@ class Vid extends NumericArgument {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Database\Connection $database
-   *   Database Service Object.
    * @param \Drupal\node\NodeStorageInterface $node_storage
    *   The node storage.
+   *
+   * @deprecated $database parameter is deprecated in drupal:9.2.0
+   * and is removed from drupal:10.0.0.
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database, NodeStorageInterface $node_storage) {
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, NodeStorageInterface $node_storage) {
+    if ($database) {
+      @trigger_error('$database parameter is deprecated in drupal:9.2.0 and is removed from drupal:10.0.0.');
+    }
     parent::__construct($configuration, $plugin_id, $plugin_definition);
 
-    $this->database = $database;
     $this->nodeStorage = $node_storage;
   }
 
@@ -68,17 +64,13 @@ public static function create(ContainerInterface $container, array $configuratio
   public function titleQuery() {
     $titles = [];
 
-    $results = $this->database->query('SELECT nr.vid, nr.nid, npr.title FROM {node_revision} nr WHERE nr.vid IN ( :vids[] )', [':vids[]' => $this->value])->fetchAllAssoc('vid', PDO::FETCH_ASSOC);
-    $nids = [];
-    foreach ($results as $result) {
-      $nids[] = $result['nid'];
-    }
-
-    $nodes = $this->nodeStorage->loadMultiple(array_unique($nids));
+    $results = $this->nodeStorage->getAggregateQuery()
+      ->allRevisions()
+      ->groupBy('title')
+      ->execute();
 
     foreach ($results as $result) {
-      $nodes[$result['nid']]->set('title', $result['title']);
-      $titles[] = $nodes[$result['nid']]->label();
+      $titles[] = $result['title'];
     }
 
     return $titles;
