diff --git a/core/modules/toolbar/config/schema/toolbar.schema.yml b/core/modules/toolbar/config/schema/toolbar.schema.yml
new file mode 100644
index 0000000..84830ae
--- /dev/null
+++ b/core/modules/toolbar/config/schema/toolbar.schema.yml
@@ -0,0 +1,13 @@
+# Schema for the configuration files of the Toolbar module.
+
+toolbar.settings:
+  type: config_object
+  label: 'Toolbar settings'
+  mapping:
+    admin_tray:
+      type: mapping
+      label: 'Admin tray settings'
+      mapping:
+        menu_name:
+          type: string
+          label: 'Menu to use in the toolbar admin tray'
diff --git a/core/modules/toolbar/src/Controller/ToolbarController.php b/core/modules/toolbar/src/Controller/ToolbarController.php
index c94e35b..ca847dd 100644
--- a/core/modules/toolbar/src/Controller/ToolbarController.php
+++ b/core/modules/toolbar/src/Controller/ToolbarController.php
@@ -72,8 +72,8 @@ public static function preRenderAdministrationTray(array $element) {
     // second level.
     $parameters = new MenuTreeParameters();
     $parameters->setMinDepth(2)->setMaxDepth(2)->onlyEnabledLinks();
-    // @todo Make the menu configurable in https://www.drupal.org/node/1869638.
-    $tree = $menu_tree->load('admin', $parameters);
+    $admin_tray_menu = \Drupal::config('toolbar.settings')->get('admin_tray.menu_name') ?: 'admin';
+    $tree = $menu_tree->load($admin_tray_menu, $parameters);
     $manipulators = [
       ['callable' => 'menu.default_tree_manipulators:checkAccess'],
       ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
@@ -96,8 +96,8 @@ public static function preRenderGetRenderedSubtrees(array $data) {
     // levels, start at the second level and end at the fourth.
     $parameters = new MenuTreeParameters();
     $parameters->setMinDepth(2)->setMaxDepth(4)->onlyEnabledLinks();
-    // @todo Make the menu configurable in https://www.drupal.org/node/1869638.
-    $tree = $menu_tree->load('admin', $parameters);
+    $admin_tray_menu = \Drupal::config('toolbar.settings')->get('admin_tray.menu_name') ?: 'admin';
+    $tree = $menu_tree->load($admin_tray_menu, $parameters);
     $manipulators = [
       ['callable' => 'menu.default_tree_manipulators:checkAccess'],
       ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
diff --git a/core/modules/toolbar/tests/modules/toolbar_custom_admin_tray_menu/config/install/system.menu.custom.yml b/core/modules/toolbar/tests/modules/toolbar_custom_admin_tray_menu/config/install/system.menu.custom.yml
new file mode 100644
index 0000000..d0ff9cd
--- /dev/null
+++ b/core/modules/toolbar/tests/modules/toolbar_custom_admin_tray_menu/config/install/system.menu.custom.yml
@@ -0,0 +1,6 @@
+langcode: en
+status: true
+dependencies: {  }
+id: custom
+label: Custom
+description: ''
diff --git a/core/modules/toolbar/tests/modules/toolbar_custom_admin_tray_menu/config/install/toolbar.settings.yml b/core/modules/toolbar/tests/modules/toolbar_custom_admin_tray_menu/config/install/toolbar.settings.yml
new file mode 100644
index 0000000..e9d5127
--- /dev/null
+++ b/core/modules/toolbar/tests/modules/toolbar_custom_admin_tray_menu/config/install/toolbar.settings.yml
@@ -0,0 +1,2 @@
+admin_tray:
+  menu_name: custom
diff --git a/core/modules/toolbar/tests/modules/toolbar_custom_admin_tray_menu/toolbar_custom_admin_tray_menu.info.yml b/core/modules/toolbar/tests/modules/toolbar_custom_admin_tray_menu/toolbar_custom_admin_tray_menu.info.yml
new file mode 100644
index 0000000..71b3f92
--- /dev/null
+++ b/core/modules/toolbar/tests/modules/toolbar_custom_admin_tray_menu/toolbar_custom_admin_tray_menu.info.yml
@@ -0,0 +1,7 @@
+name: 'Custom toolbar admin tray menu'
+type: module
+description: 'Support module for testing toolbar with a custom admin tray menu.'
+package: Testing
+version: VERSION
+dependencies:
+  - toolbar
diff --git a/core/modules/toolbar/tests/modules/toolbar_custom_admin_tray_menu/toolbar_custom_admin_tray_menu.links.menu.yml b/core/modules/toolbar/tests/modules/toolbar_custom_admin_tray_menu/toolbar_custom_admin_tray_menu.links.menu.yml
new file mode 100644
index 0000000..f852e69
--- /dev/null
+++ b/core/modules/toolbar/tests/modules/toolbar_custom_admin_tray_menu/toolbar_custom_admin_tray_menu.links.menu.yml
@@ -0,0 +1,8 @@
+custom.base:
+  title: Custom menu base link
+  menu_name: custom
+  route_name: '<nolink>'
+custom.link:
+  title: Custom menu link
+  parent: custom.base
+  route_name: '<front>'
diff --git a/core/modules/toolbar/tests/src/Functional/ToolbarCustomAdminTrayMenuTest.php b/core/modules/toolbar/tests/src/Functional/ToolbarCustomAdminTrayMenuTest.php
new file mode 100644
index 0000000..bd371a2
--- /dev/null
+++ b/core/modules/toolbar/tests/src/Functional/ToolbarCustomAdminTrayMenuTest.php
@@ -0,0 +1,66 @@
+<?php
+
+namespace Drupal\Tests\toolbar\Functional;
+
+use Drupal\Tests\BrowserTestBase;
+
+/**
+ * Tests overriding the toolbar's admin tray menu.
+ *
+ * @group toolbar
+ */
+class ToolbarCustomAdminTrayMenuTest extends BrowserTestBase {
+
+  /**
+   * A user with permission to access the toolbar.
+   *
+   * @var \Drupal\user\UserInterface
+   */
+  protected $adminUser;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = [
+    'toolbar',
+    'toolbar_custom_admin_tray_menu',
+    'test_page_test',
+  ];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $defaultTheme = 'stark';
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp(): void {
+    parent::setUp();
+
+    // Create an administrative user and log it in.
+    $this->adminUser = $this->drupalCreateUser([
+      'access toolbar',
+      'access administration pages',
+    ]);
+    $this->drupalLogin($this->adminUser);
+  }
+
+  /**
+   * Tests the custom admin tray menu.
+   */
+  public function testToolbarCustomAdminTrayMenu() {
+    $this->drupalGet('test-page');
+    $this->assertSession()->statusCodeEquals(200);
+
+    // Assert that the toolbar is present in the HTML.
+    $this->assertRaw('id="toolbar-administration"');
+
+    // Assert that the "Content" link not present.
+    $this->assertNoRaw('href="/admin/content"');
+
+    // Assert that the custom link is present.
+    $this->assertRaw('Custom menu link');
+  }
+
+}
