diff --git a/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php b/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
index 7f9464a..a329b18 100644
--- a/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
+++ b/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
@@ -80,21 +80,6 @@ public function testGoTo() {
     $this->assertSession()->responseHeaderEquals('Test-Header', 'header value');
   }
 
-  /**
-   * Tests drupalGet().
-   */
-  public function testDrupalGet() {
-    $this->drupalGet('test-page');
-    $this->assertSession()->statusCodeEquals(200);
-    $this->assertSession()->addressEquals('test-page');
-    $this->drupalGet('/test-page');
-    $this->assertSession()->statusCodeEquals(200);
-    $this->assertSession()->addressEquals('test-page');
-    $this->drupalGet('/test-page/');
-    $this->assertSession()->statusCodeEquals(200);
-    $this->assertSession()->addressEquals('/test-page/');
-  }
-
   /**
    * Tests basic form functionality.
    */
@@ -186,16 +171,6 @@ public function testError() {
     $this->drupalGet('test-error');
   }
 
-  /**
-   * Tests linkExists() with pipe character (|) in locator.
-   *
-   * @see \Drupal\Tests\WebAssert::linkExists()
-   */
-  public function testPipeCharInLocator() {
-    $this->drupalGet('test-pipe-char');
-    $this->assertSession()->linkExists('foo|bar|baz');
-  }
-
   /**
    * Tests linkExistsExact() functionality.
    *
@@ -566,41 +541,6 @@ public function testFieldAssertsForOptions() {
 
   }
 
-  /**
-   * Tests legacy field asserts for button field type.
-   */
-  public function testFieldAssertsForButton() {
-    $this->drupalGet('test-field-xpath');
-
-    // Verify if the test passes with button ID.
-    $this->assertSession()->buttonExists('edit-save');
-    // Verify if the test passes with button Value.
-    $this->assertSession()->buttonExists('Save');
-    // Verify if the test passes with button Name.
-    $this->assertSession()->buttonExists('op');
-
-    // Verify if the test passes with button ID.
-    $this->assertSession()->buttonNotExists('i-do-not-exist');
-    // Verify if the test passes with button Value.
-    $this->assertSession()->buttonNotExists('I do not exist');
-    // Verify if the test passes with button Name.
-    $this->assertSession()->buttonNotExists('no');
-
-    // Test that multiple fields with the same name are validated correctly.
-    $this->assertSession()->buttonExists('duplicate_button');
-    $this->assertSession()->buttonExists('Duplicate button 1');
-    $this->assertSession()->buttonExists('Duplicate button 2');
-    $this->assertSession()->buttonNotExists('Rabbit');
-
-    try {
-      $this->assertSession()->buttonNotExists('Duplicate button 2');
-      $this->fail('The "duplicate_button" field with the value Duplicate button 2 was not found.');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-  }
-
   /**
    * Tests legacy assertFieldChecked() and assertNoFieldChecked().
    *
@@ -614,98 +554,6 @@ public function testLegacyFieldAssertsForCheckbox() {
     $this->assertNoFieldChecked('edit-checkbox-disabled');
   }
 
-  /**
-   * Tests legacy field asserts for checkbox field type.
-   */
-  public function testFieldAssertsForCheckbox() {
-    $this->drupalGet('test-field-xpath');
-
-    // Part 1 - Test by name.
-    // Test that checkboxes are found/not found correctly by name, when using
-    // TRUE or FALSE to match their 'checked' state.
-    $this->assertSession()->fieldExists('checkbox_enabled');
-    $this->assertSession()->fieldExists('checkbox_disabled');
-    $this->assertSession()->fieldValueEquals('checkbox_enabled', TRUE);
-    $this->assertSession()->fieldValueEquals('checkbox_disabled', FALSE);
-    $this->assertSession()->fieldValueNotEquals('checkbox_enabled', FALSE);
-    $this->assertSession()->fieldValueNotEquals('checkbox_disabled', TRUE);
-
-    // Test that we have legacy support.
-    $this->assertSession()->fieldValueEquals('checkbox_enabled', '1');
-    $this->assertSession()->fieldValueEquals('checkbox_disabled', '');
-
-    // Test that the assertion fails correctly if given the right value.
-    try {
-      $this->assertSession()->fieldValueNotEquals('checkbox_enabled', TRUE);
-      $this->fail('fieldValueNotEquals failed to throw an exception.');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-
-    // Part 2 - Test by ID.
-    // Test that checkboxes are found/not found correctly by ID, when using
-    // TRUE or FALSE to match their 'checked' state.
-    $this->assertSession()->fieldValueEquals('edit-checkbox-enabled', TRUE);
-    $this->assertSession()->fieldValueEquals('edit-checkbox-disabled', FALSE);
-    $this->assertSession()->fieldValueNotEquals('edit-checkbox-enabled', FALSE);
-    $this->assertSession()->fieldValueNotEquals('edit-checkbox-disabled', TRUE);
-
-    // Test that checkboxes are found by ID, when using NULL to ignore the
-    // 'checked' state.
-    $this->assertSession()->fieldExists('edit-checkbox-enabled');
-    $this->assertSession()->fieldExists('edit-checkbox-disabled');
-
-    // Test that checkboxes are found by ID when passing no second parameter.
-    $this->assertSession()->fieldExists('edit-checkbox-enabled');
-    $this->assertSession()->fieldExists('edit-checkbox-disabled');
-
-    // Test that we have legacy support.
-    $this->assertSession()->fieldValueEquals('edit-checkbox-enabled', '1');
-    $this->assertSession()->fieldValueEquals('edit-checkbox-disabled', '');
-
-    // Test that the assertion fails correctly when using NULL to ignore state.
-    try {
-      $this->assertSession()->fieldNotExists('edit-checkbox-disabled', NULL);
-      $this->fail('The "edit-checkbox-disabled" field was not found by ID, using NULL value.');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-
-    // Part 3 - Test the specific 'checked' assertions.
-    $this->assertSession()->checkboxChecked('edit-checkbox-enabled');
-    $this->assertSession()->checkboxNotChecked('edit-checkbox-disabled');
-
-    // Test that the assertion fails correctly with non-existent field id.
-    try {
-      $this->assertSession()->checkboxNotChecked('incorrect_checkbox_id');
-      $this->fail('The "incorrect_checkbox_id" field was found');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-
-    // Test that the assertion fails correctly for a checkbox that is checked.
-    try {
-      $this->assertSession()->checkboxNotChecked('edit-checkbox-enabled');
-      $this->fail('The "edit-checkbox-enabled" field was not found in a checked state.');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-
-    // Test that the assertion fails correctly for a checkbox that is not
-    // checked.
-    try {
-      $this->assertSession()->checkboxChecked('edit-checkbox-disabled');
-      $this->fail('The "edit-checkbox-disabled" field was found and checked.');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-  }
-
   /**
    * Tests the ::cronRun() method.
    */
@@ -813,32 +661,6 @@ public function testPageContainsNoDuplicateId() {
     $assert_session->pageContainsNoDuplicateId();
   }
 
-  /**
-   * Tests assertEscaped() and assertUnescaped().
-   *
-   * @see \Drupal\Tests\WebAssert::assertNoEscaped()
-   * @see \Drupal\Tests\WebAssert::assertEscaped()
-   */
-  public function testEscapingAssertions() {
-    $assert = $this->assertSession();
-
-    $this->drupalGet('test-escaped-characters');
-    $assert->assertNoEscaped('<div class="escaped">');
-    $assert->responseContains('<div class="escaped">');
-    $assert->assertEscaped('Escaped: <"\'&>');
-
-    $this->drupalGet('test-escaped-script');
-    $assert->assertNoEscaped('<div class="escaped">');
-    $assert->responseContains('<div class="escaped">');
-    $assert->assertEscaped("<script>alert('XSS');alert(\"XSS\");</script>");
-
-    $this->drupalGet('test-unescaped-script');
-    $assert->assertNoEscaped('<div class="unescaped">');
-    $assert->responseContains('<div class="unescaped">');
-    $assert->responseContains("<script>alert('Marked safe');alert(\"Marked safe\");</script>");
-    $assert->assertNoEscaped("<script>alert('Marked safe');alert(\"Marked safe\");</script>");
-  }
-
   /**
    * Tests deprecation of legacy assertEscaped() and assertNoEscaped().
    *
diff --git a/core/tests/Drupal/FunctionalTests/WebAssertTest.php b/core/tests/Drupal/FunctionalTests/WebAssertTest.php
index 59348ec..0e63fd5 100644
--- a/core/tests/Drupal/FunctionalTests/WebAssertTest.php
+++ b/core/tests/Drupal/FunctionalTests/WebAssertTest.php
@@ -113,4 +113,295 @@ public function testPageTextContainsOnce() {
     $this->assertSession()->pageTextContainsOnce('does-not-exist');
   }
 
+  /**
+   * Tests drupalGet().
+   */
+  public function testDrupalGet() {
+    $this->drupalGet('test-page');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('test-page');
+    $this->drupalGet('/test-page');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('test-page');
+    $this->drupalGet('/test-page/');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('/test-page/');
+  }
+
+  /**
+   * Tests assertEscaped() and assertUnescaped().
+   *
+   * @see \Drupal\Tests\WebAssert::assertNoEscaped()
+   * @see \Drupal\Tests\WebAssert::assertEscaped()
+   */
+  public function testEscapingAssertions() {
+    $assert = $this->assertSession();
+
+    $this->drupalGet('test-escaped-characters');
+    $assert->assertNoEscaped('<div class="escaped">');
+    $assert->responseContains('<div class="escaped">');
+    $assert->assertEscaped('Escaped: <"\'&>');
+
+    $this->drupalGet('test-escaped-script');
+    $assert->assertNoEscaped('<div class="escaped">');
+    $assert->responseContains('<div class="escaped">');
+    $assert->assertEscaped("<script>alert('XSS');alert(\"XSS\");</script>");
+
+    $this->drupalGet('test-unescaped-script');
+    $assert->assertNoEscaped('<div class="unescaped">');
+    $assert->responseContains('<div class="unescaped">');
+    $assert->responseContains("<script>alert('Marked safe');alert(\"Marked safe\");</script>");
+    $assert->assertNoEscaped("<script>alert('Marked safe');alert(\"Marked safe\");</script>");
+  }
+
+  /**
+   * Tests legacy field asserts for button field type.
+   */
+  public function testFieldAssertsForButton() {
+    $this->drupalGet('test-field-xpath');
+
+    // Verify if the test passes with button ID.
+    $this->assertSession()->buttonExists('edit-save');
+    // Verify if the test passes with button Value.
+    $this->assertSession()->buttonExists('Save');
+    // Verify if the test passes with button Name.
+    $this->assertSession()->buttonExists('op');
+
+    // Verify if the test passes with button ID.
+    $this->assertSession()->buttonNotExists('i-do-not-exist');
+    // Verify if the test passes with button Value.
+    $this->assertSession()->buttonNotExists('I do not exist');
+    // Verify if the test passes with button Name.
+    $this->assertSession()->buttonNotExists('no');
+
+    // Test that multiple fields with the same name are validated correctly.
+    $this->assertSession()->buttonExists('duplicate_button');
+    $this->assertSession()->buttonExists('Duplicate button 1');
+    $this->assertSession()->buttonExists('Duplicate button 2');
+    $this->assertSession()->buttonNotExists('Rabbit');
+
+    try {
+      $this->assertSession()->buttonNotExists('Duplicate button 2');
+      $this->fail('The "duplicate_button" field with the value Duplicate button 2 was not found.');
+    }
+    catch (ExpectationException $e) {
+      // Expected exception; just continue testing.
+    }
+  }
+
+  /**
+   * Tests legacy field asserts for checkbox field type.
+   */
+  public function testFieldAssertsForCheckbox() {
+    $this->drupalGet('test-field-xpath');
+
+    // Part 1 - Test by name.
+    // Test that checkboxes are found/not found correctly by name, when using
+    // TRUE or FALSE to match their 'checked' state.
+    $this->assertSession()->fieldExists('checkbox_enabled');
+    $this->assertSession()->fieldExists('checkbox_disabled');
+    $this->assertSession()->fieldValueEquals('checkbox_enabled', TRUE);
+    $this->assertSession()->fieldValueEquals('checkbox_disabled', FALSE);
+    $this->assertSession()->fieldValueNotEquals('checkbox_enabled', FALSE);
+    $this->assertSession()->fieldValueNotEquals('checkbox_disabled', TRUE);
+
+    // Test that we have legacy support.
+    $this->assertSession()->fieldValueEquals('checkbox_enabled', '1');
+    $this->assertSession()->fieldValueEquals('checkbox_disabled', '');
+
+    // Test that the assertion fails correctly if given the right value.
+    try {
+      $this->assertSession()->fieldValueNotEquals('checkbox_enabled', TRUE);
+      $this->fail('fieldValueNotEquals failed to throw an exception.');
+    }
+    catch (ExpectationException $e) {
+      // Expected exception; just continue testing.
+    }
+
+    // Part 2 - Test by ID.
+    // Test that checkboxes are found/not found correctly by ID, when using
+    // TRUE or FALSE to match their 'checked' state.
+    $this->assertSession()->fieldValueEquals('edit-checkbox-enabled', TRUE);
+    $this->assertSession()->fieldValueEquals('edit-checkbox-disabled', FALSE);
+    $this->assertSession()->fieldValueNotEquals('edit-checkbox-enabled', FALSE);
+    $this->assertSession()->fieldValueNotEquals('edit-checkbox-disabled', TRUE);
+
+    // Test that checkboxes are found by ID, when using NULL to ignore the
+    // 'checked' state.
+    $this->assertSession()->fieldExists('edit-checkbox-enabled');
+    $this->assertSession()->fieldExists('edit-checkbox-disabled');
+
+    // Test that checkboxes are found by ID when passing no second parameter.
+    $this->assertSession()->fieldExists('edit-checkbox-enabled');
+    $this->assertSession()->fieldExists('edit-checkbox-disabled');
+
+    // Test that we have legacy support.
+    $this->assertSession()->fieldValueEquals('edit-checkbox-enabled', '1');
+    $this->assertSession()->fieldValueEquals('edit-checkbox-disabled', '');
+
+    // Test that the assertion fails correctly when using NULL to ignore state.
+    try {
+      $this->assertSession()->fieldNotExists('edit-checkbox-disabled', NULL);
+      $this->fail('The "edit-checkbox-disabled" field was not found by ID, using NULL value.');
+    }
+    catch (ExpectationException $e) {
+      // Expected exception; just continue testing.
+    }
+
+    // Part 3 - Test the specific 'checked' assertions.
+    $this->assertSession()->checkboxChecked('edit-checkbox-enabled');
+    $this->assertSession()->checkboxNotChecked('edit-checkbox-disabled');
+
+    // Test that the assertion fails correctly with non-existent field id.
+    try {
+      $this->assertSession()->checkboxNotChecked('incorrect_checkbox_id');
+      $this->fail('The "incorrect_checkbox_id" field was found');
+    }
+    catch (ExpectationException $e) {
+      // Expected exception; just continue testing.
+    }
+
+    // Test that the assertion fails correctly for a checkbox that is checked.
+    try {
+      $this->assertSession()->checkboxNotChecked('edit-checkbox-enabled');
+      $this->fail('The "edit-checkbox-enabled" field was not found in a checked state.');
+    }
+    catch (ExpectationException $e) {
+      // Expected exception; just continue testing.
+    }
+
+    // Test that the assertion fails correctly for a checkbox that is not
+    // checked.
+    try {
+      $this->assertSession()->checkboxChecked('edit-checkbox-disabled');
+      $this->fail('The "edit-checkbox-disabled" field was found and checked.');
+    }
+    catch (ExpectationException $e) {
+      // Expected exception; just continue testing.
+    }
+  }
+
+  /**
+   * Tests basic form functionality.
+   */
+  public function testForm() {
+    // Ensure the proper response code for a _form route.
+    $this->drupalGet('form-test/object-builder');
+    $this->assertSession()->statusCodeEquals(200);
+
+    // Ensure the form and text field exist.
+    $this->assertSession()->elementExists('css', 'form#form-test-form-test-object');
+    $this->assertSession()->fieldExists('bananas');
+
+    // Check that the hidden field exists and has a specific value.
+    $this->assertSession()->hiddenFieldExists('strawberry');
+    $this->assertSession()->hiddenFieldExists('red');
+    $this->assertSession()->hiddenFieldExists('redstrawberryhiddenfield');
+    $this->assertSession()->hiddenFieldValueNotEquals('strawberry', 'brown');
+    $this->assertSession()->hiddenFieldValueEquals('strawberry', 'red');
+
+    // Check that a hidden field does not exist.
+    $this->assertSession()->hiddenFieldNotExists('bananas');
+    $this->assertSession()->hiddenFieldNotExists('pineapple');
+
+    $edit = ['bananas' => 'green'];
+    $this->submitForm($edit, 'Save', 'form-test-form-test-object');
+
+    $config_factory = $this->container->get('config.factory');
+    $value = $config_factory->get('form_test.object')->get('bananas');
+    $this->assertSame('green', $value);
+
+    // Test drupalPostForm().
+    $edit = ['bananas' => 'red'];
+    // Submit the form using the button label.
+    $result = $this->drupalPostForm('form-test/object-builder', $edit, 'Save');
+    $this->assertSame($this->getSession()->getPage()->getContent(), $result);
+    $value = $config_factory->get('form_test.object')->get('bananas');
+    $this->assertSame('red', $value);
+
+    $this->drupalPostForm('form-test/object-builder', [], 'Save');
+    $value = $config_factory->get('form_test.object')->get('bananas');
+    $this->assertSame('', $value);
+
+    // Submit the form using the button id.
+    $edit = ['bananas' => 'blue'];
+    $result = $this->drupalPostForm('form-test/object-builder', $edit, 'edit-submit');
+    $this->assertSame($this->getSession()->getPage()->getContent(), $result);
+    $value = $config_factory->get('form_test.object')->get('bananas');
+    $this->assertSame('blue', $value);
+
+    // Submit the form using the button name.
+    $edit = ['bananas' => 'purple'];
+    $result = $this->drupalPostForm('form-test/object-builder', $edit, 'op');
+    $this->assertSame($this->getSession()->getPage()->getContent(), $result);
+    $value = $config_factory->get('form_test.object')->get('bananas');
+    $this->assertSame('purple', $value);
+
+    // Test drupalPostForm() with no-html response.
+    $values = Json::decode($this->drupalPostForm('form_test/form-state-values-clean', [], t('Submit')));
+    $this->assertSame(1000, $values['beer']);
+
+    // Test drupalPostForm() with form by HTML id.
+    $this->drupalCreateContentType(['type' => 'page']);
+    $this->drupalLogin($this->drupalCreateUser(['create page content']));
+    $this->drupalGet('form-test/two-instances-of-same-form');
+    $this->getSession()->getPage()->fillField('edit-title-0-value', 'form1');
+    $this->getSession()->getPage()->fillField('edit-title-0-value--2', 'form2');
+    $this->drupalPostForm(NULL, [], 'Save', [], 'node-page-form--2');
+    $this->assertSession()->pageTextContains('Page form2 has been created.');
+  }
+
+  /**
+   * Tests linkExists() with pipe character (|) in locator.
+   *
+   * @see \Drupal\Tests\WebAssert::linkExists()
+   */
+  public function testPipeCharInLocator() {
+    $this->drupalGet('test-pipe-char');
+    $this->assertSession()->linkExists('foo|bar|baz');
+  }
+
+  /**
+   * Tests basic page test.
+   */
+  public function testGoTo() {
+    $account = $this->drupalCreateUser();
+    $this->drupalLogin($account);
+
+    // Visit a Drupal page that requires login.
+    $this->drupalGet('test-page');
+    $this->assertSession()->statusCodeEquals(200);
+
+    // Test page contains some text.
+    $this->assertSession()->pageTextContains('Test page text.');
+
+    // Check that returned plain text is correct.
+    $text = $this->getTextContent();
+    $this->assertStringContainsString('Test page text.', $text);
+    $this->assertStringNotContainsString('</html>', $text);
+
+    // Response includes cache tags that we can assert.
+    $this->assertSession()->responseHeaderExists('X-Drupal-Cache-Tags');
+    $this->assertSession()->responseHeaderEquals('X-Drupal-Cache-Tags', 'http_response rendered');
+
+    // Test that we can read the JS settings.
+    $js_settings = $this->getDrupalSettings();
+    $this->assertSame('azAZ09();.,\\\/-_{}', $js_settings['test-setting']);
+
+    // Test drupalGet with a url object.
+    $url = Url::fromRoute('test_page_test.render_title');
+    $this->drupalGet($url);
+    $this->assertSession()->statusCodeEquals(200);
+
+    // Test page contains some text.
+    $this->assertSession()->pageTextContains('Hello Drupal');
+
+    // Test that setting headers with drupalGet() works.
+    $this->drupalGet('system-test/header', [], [
+      'Test-Header' => 'header value',
+    ]);
+    $this->assertSession()->responseHeaderExists('Test-Header');
+    $this->assertSession()->responseHeaderEquals('Test-Header', 'header value');
+  }
+
 }
