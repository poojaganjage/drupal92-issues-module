diff --git a/core/themes/olivero/js/checkbox.es6.js b/core/themes/olivero/js/checkbox.es6.js
index 26243e7..1ea09ed 100644
--- a/core/themes/olivero/js/checkbox.es6.js
+++ b/core/themes/olivero/js/checkbox.es6.js
@@ -1,11 +1,11 @@
 /**
  * @file
- * Theme override for checkbox.
+ * Provide JS for construct checkbox element.
  */
 
 ((Drupal) => {
   /**
-   * Constructs a checkbox input element.
+   * Constucts a checkbox input element.
    *
    * @return {string}
    *   A string representing a DOM fragment.
diff --git a/core/themes/olivero/js/comments.es6.js b/core/themes/olivero/js/comments.es6.js
index 5117d8e..5600ede 100644
--- a/core/themes/olivero/js/comments.es6.js
+++ b/core/themes/olivero/js/comments.es6.js
@@ -1,9 +1,15 @@
 /**
  * @file
- * Comments.
+ * Provide JS for indented comments wrapper.
  */
 
 ((Drupal) => {
+  /**
+   * Constucts a comments.
+   *
+   * @return {bool}
+   *   Returns bool value.
+   */
   const indentedComments = document.querySelectorAll('.comments .indented');
 
   document.querySelectorAll('.comment').forEach((comment) => {
diff --git a/core/themes/olivero/js/messages.es6.js b/core/themes/olivero/js/messages.es6.js
index cf1fdd8..a0a5013 100644
--- a/core/themes/olivero/js/messages.es6.js
+++ b/core/themes/olivero/js/messages.es6.js
@@ -1,125 +1,41 @@
-/**
- * @file
- * Messages.
- */
-
 ((Drupal) => {
   /**
-   * Adds close button to the message.
-   *
-   * @param {object} message
-   *   The message object.
-   */
-  const closeMessage = (message) => {
-    const messageContainer = message.querySelector('.messages__container');
-
-    const closeBtnWrapper = document.createElement('div');
-    closeBtnWrapper.setAttribute('class', 'messages__button');
-
-    const closeBtn = document.createElement('button');
-    closeBtn.setAttribute('type', 'button');
-    closeBtn.setAttribute('class', 'messages__close');
-
-    const closeBtnText = document.createElement('span');
-    closeBtnText.setAttribute('class', 'visually-hidden');
-    closeBtnText.innerText = Drupal.t('Close message');
-
-    messageContainer.appendChild(closeBtnWrapper);
-    closeBtnWrapper.appendChild(closeBtn);
-    closeBtn.appendChild(closeBtnText);
-
-    message.classList.add('messages-processed');
-
-    closeBtn.addEventListener('click', () => {
-      message.classList.add('hidden');
-    });
-  };
-
-  /**
-   * Overrides message theme function.
+   * Attaches the processed messages to the elements.
    *
-   * @param {object} message
-   *   The message object.
-   * @param {string} message.text
-   *   The message text.
-   * @param {object} options
-   *   The message context.
-   * @param {string} options.type
-   *   The message type.
-   * @param {string} options.id
-   *   ID of the message, for reference.
+   * @type {object}
    *
-   * @return {HTMLElement}
-   *   A DOM Node.
+   * @prop {object} attach
+   *   Attach context for messages.
    */
-  Drupal.theme.message = ({ text }, { type, id }) => {
-    const messagesTypes = Drupal.Message.getMessageTypeLabels();
-    const messageWrapper = document.createElement('div');
-
-    messageWrapper.setAttribute(
-      'class',
-      `messages-list__item messages messages--${type} messages-processed`,
-    );
-    messageWrapper.setAttribute(
-      'role',
-      type === 'error' || type === 'warning' ? 'alert' : 'status',
-    );
-    messageWrapper.setAttribute('aria-labelledby', `${id}-title`);
-    messageWrapper.setAttribute('data-drupal-message-id', id);
-    messageWrapper.setAttribute('data-drupal-message-type', type);
-    let svg = '';
-
-    if (['error', 'warning', 'status', 'info'].indexOf(type) > -1) {
-      svg =
-        '<div class="messages__icon"><svg width="32" height="32" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">';
-    }
+  Drupal.behaviors.messages = {
+    attach(context) {
+      const messages = context.querySelectorAll(
+        '.messages:not(.messages-processed)',
+      );
 
-    if (type === 'error') {
-      svg +=
-        '<path d="M0.117801 16.7381C0.202622 17.9153 0.292289 18.562 0.481317 19.3904C0.922384 21.3161 1.6785 23.0626 2.76178 24.6589C4.58178 27.3355 7.18213 29.3823 10.1993 30.5062C12.458 31.3467 14.942 31.6495 17.3461 31.3782C22.5831 30.7872 27.1246 27.6164 29.4875 22.9027C30.3769 21.132 30.8616 19.3929 31.0797 17.1983C31.1209 16.7768 31.1209 15.1733 31.0797 14.7518C30.8786 12.7195 30.4714 11.1693 29.7032 9.49549C28.3848 6.62269 26.1722 4.18589 23.4289 2.58235C19.4399 0.249712 14.5373 -0.171762 10.1993 1.44389C5.82985 3.07165 2.38372 6.62753 0.915114 11.0215C0.512822 12.223 0.289865 13.2863 0.161423 14.604C0.127495 14.9674 0.0959901 16.4425 0.117801 16.7381ZM4.02924 14.9577C4.2837 12.2108 5.46391 9.69412 7.40024 7.76115C9.15966 6.00743 11.3529 4.89319 13.8224 4.49352C14.4234 4.39905 14.8717 4.36514 15.6012 4.36271C16.6941 4.36271 17.4793 4.45718 18.5093 4.71636C19.2969 4.91257 20.0143 5.17902 20.7873 5.55931C21.2526 5.78943 21.9409 6.18183 21.9554 6.22786C21.9651 6.25692 5.90498 22.3093 5.86621 22.3093C5.82501 22.3093 5.46391 21.6916 5.21915 21.2071C4.51877 19.8071 4.10921 18.2956 4.005 16.7138C3.98077 16.336 3.99288 15.3453 4.02924 14.9577ZM25.3725 9.6384C25.4428 9.7038 25.816 10.3602 26.0341 10.8035C26.6618 12.0776 27.0301 13.359 27.1876 14.8366C27.2385 15.2968 27.2458 16.5225 27.2022 16.9561C27.0859 18.0776 26.8847 18.9786 26.526 19.9669C26.2377 20.7663 25.7748 21.6843 25.2998 22.394C23.8748 24.5232 21.7882 26.1364 19.3987 26.9576C18.1046 27.4009 16.985 27.585 15.5891 27.585C14.8232 27.585 14.4646 27.5607 13.786 27.4541C12.2568 27.2192 10.6574 26.6209 9.40685 25.8191L9.23237 25.7077L17.2879 17.6609C23.3562 11.598 25.3507 9.61903 25.3725 9.6384Z"/>';
-    } else if (type === 'warning') {
-      svg +=
-        '<path d="M16 0C7.16667 0 0 7.16667 0 16C0 24.8333 7.16667 32 16 32C24.8333 32 32 24.8333 32 16C32 7.16667 24.8333 0 16 0ZM18.6667 25.9792C18.6667 26.3542 18.375 26.6667 18.0208 26.6667H14.0208C13.6458 26.6667 13.3333 26.3542 13.3333 25.9792V22.0208C13.3333 21.6458 13.6458 21.3333 14.0208 21.3333H18.0208C18.375 21.3333 18.6667 21.6458 18.6667 22.0208V25.9792ZM18.625 18.8125C18.6042 19.1042 18.2917 19.3333 17.9167 19.3333H14.0625C13.6667 19.3333 13.3542 19.1042 13.3542 18.8125L13 5.875C13 5.72917 13.0625 5.58333 13.2083 5.5C13.3333 5.39583 13.5208 5.33333 13.7083 5.33333H18.2917C18.4792 5.33333 18.6667 5.39583 18.7917 5.5C18.9375 5.58333 19 5.72917 19 5.875L18.625 18.8125Z"/>';
-    } else if (type === 'status') {
-      svg +=
-        '<path d="M26.75 12.625C26.75 12.9792 26.625 13.3125 26.375 13.5625L15.0625 24.875C14.8125 25.125 14.4583 25.2708 14.1042 25.2708C13.7708 25.2708 13.4167 25.125 13.1667 24.875L5.625 17.3333C5.375 17.0833 5.25 16.75 5.25 16.3958C5.25 16.0417 5.375 15.6875 5.625 15.4375L7.52083 13.5625C7.77083 13.3125 8.10417 13.1667 8.45833 13.1667C8.8125 13.1667 9.14583 13.3125 9.39583 13.5625L14.1042 18.2708L22.6042 9.79167C22.8542 9.54167 23.1875 9.39583 23.5417 9.39583C23.8958 9.39583 24.2292 9.54167 24.4792 9.79167L26.375 11.6667C26.625 11.9167 26.75 12.2708 26.75 12.625ZM32 16C32 7.16667 24.8333 0 16 0C7.16667 0 0 7.16667 0 16C0 24.8333 7.16667 32 16 32C24.8333 32 32 24.8333 32 16Z"/>';
-    } else if (type === 'info') {
-      svg +=
-        '<path d="M32,16c0,8.8-7.2,16-16,16S0,24.8,0,16C0,7.2,7.2,0,16,0S32,7.2,32,16z M16.4,5.3c-3.5,0-5.8,1.5-7.5,4.1c-0.2,0.3-0.2,0.8,0.2,1l2.2,1.7c0.3,0.3,0.8,0.2,1.1-0.1c1.2-1.5,1.9-2.3,3.7-2.3c1.3,0,2.9,0.8,2.9,2.1c0,1-0.8,1.5-2.1,2.2c-1.5,0.9-3.5,1.9-3.5,4.6v0.3c0,0.4,0.3,0.8,0.8,0.8h3.6c0.4,0,0.8-0.3,0.8-0.8v-0.1c0-1.8,5.4-1.9,5.4-6.9C23.9,8.1,20.1,5.3,16.4,5.3z M16,21.3c-1.6,0-3,1.3-3,3c0,1.6,1.3,3,3,3s3-1.3,3-3C19,22.6,17.6,21.3,16,21.3z"/>';
-    }
+      messages.forEach((el) => {
+        const messageContainer = el.querySelector('.messages__container');
 
-    if (['error', 'warning', 'status', 'info'].indexOf(type) > -1) {
-      svg += '</svg></div>';
-    }
+        const closeBtnWrapper = document.createElement('div');
+        closeBtnWrapper.setAttribute('class', 'messages__button');
 
-    messageWrapper.innerHTML = `
-    <div class="messages__container">
-      <div class="messages__header${!svg ? ' no-icon' : ''}">
-        <h2 class="visually-hidden">${messagesTypes[type]}</h2>
-        ${svg}
-      </div>
-      <div class="messages__content">
-        ${text}
-      </div>
-    </div>
-    `;
+        const closeBtn = document.createElement('button');
+        closeBtn.setAttribute('type', 'button');
+        closeBtn.setAttribute('class', 'messages__close');
 
-    closeMessage(messageWrapper);
+        const closeBtnText = document.createElement('span');
+        closeBtnText.setAttribute('class', 'visually-hidden');
+        closeBtnText.innerText = Drupal.t('Close message');
 
-    return messageWrapper;
-  };
+        messageContainer.appendChild(closeBtnWrapper);
+        closeBtnWrapper.appendChild(closeBtn);
+        closeBtn.appendChild(closeBtnText);
 
-  /**
-   * Getting messages from context.
-   */
-  Drupal.behaviors.messages = {
-    attach(context) {
-      const messages = context.querySelectorAll(
-        '.messages:not(.messages-processed)',
-      );
+        el.classList.add('messages-processed');
 
-      messages.forEach((message) => {
-        closeMessage(message);
+        closeBtn.addEventListener('click', () => {
+          el.classList.add('hidden');
+        });
       });
     },
   };
diff --git a/core/themes/olivero/js/messages.js b/core/themes/olivero/js/messages.js
index aadb74b..12c6c95 100644
--- a/core/themes/olivero/js/messages.js
+++ b/core/themes/olivero/js/messages.js
@@ -6,66 +6,26 @@
 **/
 
 (function (Drupal) {
-  var closeMessage = function closeMessage(message) {
-    var messageContainer = message.querySelector('.messages__container');
-    var closeBtnWrapper = document.createElement('div');
-    closeBtnWrapper.setAttribute('class', 'messages__button');
-    var closeBtn = document.createElement('button');
-    closeBtn.setAttribute('type', 'button');
-    closeBtn.setAttribute('class', 'messages__close');
-    var closeBtnText = document.createElement('span');
-    closeBtnText.setAttribute('class', 'visually-hidden');
-    closeBtnText.innerText = Drupal.t('Close message');
-    messageContainer.appendChild(closeBtnWrapper);
-    closeBtnWrapper.appendChild(closeBtn);
-    closeBtn.appendChild(closeBtnText);
-    message.classList.add('messages-processed');
-    closeBtn.addEventListener('click', function () {
-      message.classList.add('hidden');
-    });
-  };
-
-  Drupal.theme.message = function (_ref, _ref2) {
-    var text = _ref.text;
-    var type = _ref2.type,
-        id = _ref2.id;
-    var messagesTypes = Drupal.Message.getMessageTypeLabels();
-    var messageWrapper = document.createElement('div');
-    messageWrapper.setAttribute('class', "messages-list__item messages messages--".concat(type, " messages-processed"));
-    messageWrapper.setAttribute('role', type === 'error' || type === 'warning' ? 'alert' : 'status');
-    messageWrapper.setAttribute('aria-labelledby', "".concat(id, "-title"));
-    messageWrapper.setAttribute('data-drupal-message-id', id);
-    messageWrapper.setAttribute('data-drupal-message-type', type);
-    var svg = '';
-
-    if (['error', 'warning', 'status', 'info'].indexOf(type) > -1) {
-      svg = '<div class="messages__icon"><svg width="32" height="32" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">';
-    }
-
-    if (type === 'error') {
-      svg += '<path d="M0.117801 16.7381C0.202622 17.9153 0.292289 18.562 0.481317 19.3904C0.922384 21.3161 1.6785 23.0626 2.76178 24.6589C4.58178 27.3355 7.18213 29.3823 10.1993 30.5062C12.458 31.3467 14.942 31.6495 17.3461 31.3782C22.5831 30.7872 27.1246 27.6164 29.4875 22.9027C30.3769 21.132 30.8616 19.3929 31.0797 17.1983C31.1209 16.7768 31.1209 15.1733 31.0797 14.7518C30.8786 12.7195 30.4714 11.1693 29.7032 9.49549C28.3848 6.62269 26.1722 4.18589 23.4289 2.58235C19.4399 0.249712 14.5373 -0.171762 10.1993 1.44389C5.82985 3.07165 2.38372 6.62753 0.915114 11.0215C0.512822 12.223 0.289865 13.2863 0.161423 14.604C0.127495 14.9674 0.0959901 16.4425 0.117801 16.7381ZM4.02924 14.9577C4.2837 12.2108 5.46391 9.69412 7.40024 7.76115C9.15966 6.00743 11.3529 4.89319 13.8224 4.49352C14.4234 4.39905 14.8717 4.36514 15.6012 4.36271C16.6941 4.36271 17.4793 4.45718 18.5093 4.71636C19.2969 4.91257 20.0143 5.17902 20.7873 5.55931C21.2526 5.78943 21.9409 6.18183 21.9554 6.22786C21.9651 6.25692 5.90498 22.3093 5.86621 22.3093C5.82501 22.3093 5.46391 21.6916 5.21915 21.2071C4.51877 19.8071 4.10921 18.2956 4.005 16.7138C3.98077 16.336 3.99288 15.3453 4.02924 14.9577ZM25.3725 9.6384C25.4428 9.7038 25.816 10.3602 26.0341 10.8035C26.6618 12.0776 27.0301 13.359 27.1876 14.8366C27.2385 15.2968 27.2458 16.5225 27.2022 16.9561C27.0859 18.0776 26.8847 18.9786 26.526 19.9669C26.2377 20.7663 25.7748 21.6843 25.2998 22.394C23.8748 24.5232 21.7882 26.1364 19.3987 26.9576C18.1046 27.4009 16.985 27.585 15.5891 27.585C14.8232 27.585 14.4646 27.5607 13.786 27.4541C12.2568 27.2192 10.6574 26.6209 9.40685 25.8191L9.23237 25.7077L17.2879 17.6609C23.3562 11.598 25.3507 9.61903 25.3725 9.6384Z"/>';
-    } else if (type === 'warning') {
-      svg += '<path d="M16 0C7.16667 0 0 7.16667 0 16C0 24.8333 7.16667 32 16 32C24.8333 32 32 24.8333 32 16C32 7.16667 24.8333 0 16 0ZM18.6667 25.9792C18.6667 26.3542 18.375 26.6667 18.0208 26.6667H14.0208C13.6458 26.6667 13.3333 26.3542 13.3333 25.9792V22.0208C13.3333 21.6458 13.6458 21.3333 14.0208 21.3333H18.0208C18.375 21.3333 18.6667 21.6458 18.6667 22.0208V25.9792ZM18.625 18.8125C18.6042 19.1042 18.2917 19.3333 17.9167 19.3333H14.0625C13.6667 19.3333 13.3542 19.1042 13.3542 18.8125L13 5.875C13 5.72917 13.0625 5.58333 13.2083 5.5C13.3333 5.39583 13.5208 5.33333 13.7083 5.33333H18.2917C18.4792 5.33333 18.6667 5.39583 18.7917 5.5C18.9375 5.58333 19 5.72917 19 5.875L18.625 18.8125Z"/>';
-    } else if (type === 'status') {
-      svg += '<path d="M26.75 12.625C26.75 12.9792 26.625 13.3125 26.375 13.5625L15.0625 24.875C14.8125 25.125 14.4583 25.2708 14.1042 25.2708C13.7708 25.2708 13.4167 25.125 13.1667 24.875L5.625 17.3333C5.375 17.0833 5.25 16.75 5.25 16.3958C5.25 16.0417 5.375 15.6875 5.625 15.4375L7.52083 13.5625C7.77083 13.3125 8.10417 13.1667 8.45833 13.1667C8.8125 13.1667 9.14583 13.3125 9.39583 13.5625L14.1042 18.2708L22.6042 9.79167C22.8542 9.54167 23.1875 9.39583 23.5417 9.39583C23.8958 9.39583 24.2292 9.54167 24.4792 9.79167L26.375 11.6667C26.625 11.9167 26.75 12.2708 26.75 12.625ZM32 16C32 7.16667 24.8333 0 16 0C7.16667 0 0 7.16667 0 16C0 24.8333 7.16667 32 16 32C24.8333 32 32 24.8333 32 16Z"/>';
-    } else if (type === 'info') {
-      svg += '<path d="M32,16c0,8.8-7.2,16-16,16S0,24.8,0,16C0,7.2,7.2,0,16,0S32,7.2,32,16z M16.4,5.3c-3.5,0-5.8,1.5-7.5,4.1c-0.2,0.3-0.2,0.8,0.2,1l2.2,1.7c0.3,0.3,0.8,0.2,1.1-0.1c1.2-1.5,1.9-2.3,3.7-2.3c1.3,0,2.9,0.8,2.9,2.1c0,1-0.8,1.5-2.1,2.2c-1.5,0.9-3.5,1.9-3.5,4.6v0.3c0,0.4,0.3,0.8,0.8,0.8h3.6c0.4,0,0.8-0.3,0.8-0.8v-0.1c0-1.8,5.4-1.9,5.4-6.9C23.9,8.1,20.1,5.3,16.4,5.3z M16,21.3c-1.6,0-3,1.3-3,3c0,1.6,1.3,3,3,3s3-1.3,3-3C19,22.6,17.6,21.3,16,21.3z"/>';
-    }
-
-    if (['error', 'warning', 'status', 'info'].indexOf(type) > -1) {
-      svg += '</svg></div>';
-    }
-
-    messageWrapper.innerHTML = "\n    <div class=\"messages__container\">\n      <div class=\"messages__header".concat(!svg ? ' no-icon' : '', "\">\n        <h2 class=\"visually-hidden\">").concat(messagesTypes[type], "</h2>\n        ").concat(svg, "\n      </div>\n      <div class=\"messages__content\">\n        ").concat(text, "\n      </div>\n    </div>\n    ");
-    closeMessage(messageWrapper);
-    return messageWrapper;
-  };
-
   Drupal.behaviors.messages = {
     attach: function attach(context) {
       var messages = context.querySelectorAll('.messages:not(.messages-processed)');
-      messages.forEach(function (message) {
-        closeMessage(message);
+      messages.forEach(function (el) {
+        var messageContainer = el.querySelector('.messages__container');
+        var closeBtnWrapper = document.createElement('div');
+        closeBtnWrapper.setAttribute('class', 'messages__button');
+        var closeBtn = document.createElement('button');
+        closeBtn.setAttribute('type', 'button');
+        closeBtn.setAttribute('class', 'messages__close');
+        var closeBtnText = document.createElement('span');
+        closeBtnText.setAttribute('class', 'visually-hidden');
+        closeBtnText.innerText = Drupal.t('Close message');
+        messageContainer.appendChild(closeBtnWrapper);
+        closeBtnWrapper.appendChild(closeBtn);
+        closeBtn.appendChild(closeBtnText);
+        el.classList.add('messages-processed');
+        closeBtn.addEventListener('click', function () {
+          el.classList.add('hidden');
+        });
       });
     }
   };
diff --git a/core/themes/olivero/js/navigation.es6.js b/core/themes/olivero/js/navigation.es6.js
index 4e2fe5b..a115070 100644
--- a/core/themes/olivero/js/navigation.es6.js
+++ b/core/themes/olivero/js/navigation.es6.js
@@ -1,4 +1,9 @@
-((Drupal) => {
+/**
+ * @file
+ * Provides the JS for header navigation.
+ */
+
+(() => {
   /**
    * Checks if navWrapper contains "is-active" class.
    * @param {object} navWrapper
@@ -45,11 +50,11 @@
       toggleNav(props, !isNavOpen(props.navWrapper));
     });
 
-    // Closes any open sub navigation first, then close header navigation.
+    // Closes any open subnavigation first, then close header navigation slideout.
     document.addEventListener('keyup', (e) => {
       if (e.key === 'Escape') {
-        if (props.olivero.areAnySubNavsOpen()) {
-          props.olivero.closeAllSubNav();
+        if (props.settings.olivero.areAnySubnavsOpen()) {
+          props.settings.olivero.closeAllSubNav();
         } else {
           toggleNav(props, false);
         }
@@ -70,14 +75,14 @@
         if (e.shiftKey) {
           if (
             document.activeElement === props.firstFocusableEl &&
-            !props.olivero.isDesktopNav()
+            !props.settings.olivero.isDesktopNav()
           ) {
             props.navButton.focus();
             e.preventDefault();
           }
         } else if (
           document.activeElement === props.lastFocusableEl &&
-          !props.olivero.isDesktopNav()
+          !props.settings.olivero.isDesktopNav()
         ) {
           props.navButton.focus();
           e.preventDefault();
@@ -88,7 +93,7 @@
     // Remove overlays when browser is resized and desktop nav appears.
     // @todo Use core/drupal.debounce library to throttle when we move into theming.
     window.addEventListener('resize', () => {
-      if (props.olivero.isDesktopNav()) {
+      if (props.settings.olivero.isDesktopNav()) {
         toggleNav(props, false);
         props.body.classList.remove('js-overlay-active', 'js-fixed');
       }
@@ -96,7 +101,10 @@
   }
 
   /**
-   * Initialize the navigation JS.
+   * Initialise the navigation JS.
+   *
+   * @prop {object} attach
+   *   Attach context and settings for navigation.
    */
   Drupal.behaviors.oliveroNavigation = {
     attach(context, settings) {
@@ -106,7 +114,6 @@
       );
       if (navWrapper) {
         navWrapper.classList.add(`${navWrapperId}-processed`);
-        const olivero = Drupal.olivero;
         const navButton = context.querySelector('.mobile-nav-button');
         const body = context.querySelector('body');
         const overlay = context.querySelector('.overlay');
@@ -119,7 +126,6 @@
 
         init({
           settings,
-          olivero,
           navWrapperId,
           navWrapper,
           navButton,
@@ -131,4 +137,4 @@
       }
     },
   };
-})(Drupal);
+})();
diff --git a/core/themes/olivero/js/navigation.js b/core/themes/olivero/js/navigation.js
index 8a26829..61d6ac9 100644
--- a/core/themes/olivero/js/navigation.js
+++ b/core/themes/olivero/js/navigation.js
@@ -5,7 +5,7 @@
 * @preserve
 **/
 
-(function (Drupal) {
+(function () {
   function isNavOpen(navWrapper) {
     return navWrapper.classList.contains('is-active');
   }
@@ -33,8 +33,8 @@
     });
     document.addEventListener('keyup', function (e) {
       if (e.key === 'Escape') {
-        if (props.olivero.areAnySubNavsOpen()) {
-          props.olivero.closeAllSubNav();
+        if (props.settings.olivero.areAnySubnavsOpen()) {
+          props.settings.olivero.closeAllSubNav();
         } else {
           toggleNav(props, false);
         }
@@ -49,18 +49,18 @@
     props.navWrapper.addEventListener('keydown', function (e) {
       if (e.key === 'Tab') {
         if (e.shiftKey) {
-          if (document.activeElement === props.firstFocusableEl && !props.olivero.isDesktopNav()) {
+          if (document.activeElement === props.firstFocusableEl && !props.settings.olivero.isDesktopNav()) {
             props.navButton.focus();
             e.preventDefault();
           }
-        } else if (document.activeElement === props.lastFocusableEl && !props.olivero.isDesktopNav()) {
+        } else if (document.activeElement === props.lastFocusableEl && !props.settings.olivero.isDesktopNav()) {
           props.navButton.focus();
           e.preventDefault();
         }
       }
     });
     window.addEventListener('resize', function () {
-      if (props.olivero.isDesktopNav()) {
+      if (props.settings.olivero.isDesktopNav()) {
         toggleNav(props, false);
         props.body.classList.remove('js-overlay-active', 'js-fixed');
       }
@@ -74,7 +74,6 @@
 
       if (navWrapper) {
         navWrapper.classList.add("".concat(navWrapperId, "-processed"));
-        var olivero = Drupal.olivero;
         var navButton = context.querySelector('.mobile-nav-button');
         var body = context.querySelector('body');
         var overlay = context.querySelector('.overlay');
@@ -83,7 +82,6 @@
         var lastFocusableEl = focusableNavElements[focusableNavElements.length - 1];
         init({
           settings: settings,
-          olivero: olivero,
           navWrapperId: navWrapperId,
           navWrapper: navWrapper,
           navButton: navButton,
@@ -95,4 +93,4 @@
       }
     }
   };
-})(Drupal);
\ No newline at end of file
+})();
\ No newline at end of file
diff --git a/core/themes/olivero/js/scripts.es6.js b/core/themes/olivero/js/scripts.es6.js
index e38cff5..e4b8ad0 100644
--- a/core/themes/olivero/js/scripts.es6.js
+++ b/core/themes/olivero/js/scripts.es6.js
@@ -1,12 +1,22 @@
+/**
+ * @file
+ * Provide JS for showing and hiding navigation on different layouts.
+ */
+
 /* eslint-disable no-inner-declarations */
-((Drupal) => {
+(() => {
+  window.drupalSettings = window.drupalSettings || {};
+  window.drupalSettings.olivero = window.drupalSettings.olivero || {};
+
+  // Replicates Drupal's addition of adding a `js` class onto HTML element.
+  document.documentElement.classList.add('js');
+
   /**
-   * Olivero helper functions.
+   * Checks if desktop navigation display none or not.
    *
-   * @namespace
+   * @return {string}
+   *   Check property is none or not.
    */
-  Drupal.olivero = {};
-
   function isDesktopNav() {
     // @todo, I'm not sure we even need the .mobile-buttons container anymore.
     const navButtons = document.querySelector('.mobile-buttons');
@@ -15,15 +25,24 @@
     );
   }
 
-  Drupal.olivero.isDesktopNav = isDesktopNav;
+  drupalSettings.olivero.isDesktopNav = isDesktopNav;
 
   const wideNavButton = document.querySelector('.nav-primary__button');
   const siteHeaderFixable = document.querySelector('.site-header__fixable');
 
+  /**
+   * Check if wide navigation button is expanded to true or not.
+   *
+   * @return {bool}
+   *   Returns bool value to wide navigation.
+   */
   function wideNavIsOpen() {
     return wideNavButton.getAttribute('aria-expanded') === 'true';
   }
 
+  /**
+   * Showing wide navigation using "is-expanded" class.
+   */
   function showWideNav() {
     if (isDesktopNav()) {
       wideNavButton.setAttribute('aria-expanded', 'true');
@@ -31,7 +50,9 @@
     }
   }
 
-  // Resets the wide nav button to be closed (its default state).
+  /**
+   * Hiding wide navigation using "is-expanded" class.
+   */
   function hideWideNav() {
     if (isDesktopNav()) {
       wideNavButton.setAttribute('aria-expanded', 'false');
@@ -39,15 +60,27 @@
     }
   }
 
-  // Only enable scroll effects if the browser supports Intersection Observer.
-  // @see https://github.com/w3c/IntersectionObserver/blob/master/polyfill/intersection-observer.js#L19-L21
+  /**
+   * Only enable scroll effects if the browser supports Intersection Observer.
+   *
+   * @see https://github.com/w3c/IntersectionObserver/blob/master/polyfill/intersection-observer.js#L19-L21
+   */
   if (
     'IntersectionObserver' in window &&
     'IntersectionObserverEntry' in window &&
     'intersectionRatio' in window.IntersectionObserverEntry.prototype
   ) {
-    const fixableElements = document.querySelectorAll('.fixable');
-
+    const fixables = document.querySelectorAll('.fixable');
+
+    /**
+     * Show toggle desktop navigation visibility by using add or remove "js-fixed" class.
+     *
+     * @param {object} entries
+     *   Toggle dektop navigation visibility.
+     *
+     * @return {string}
+     *   Check desktop navigation.
+     */
     function toggleDesktopNavVisibility(entries) {
       if (!isDesktopNav()) return;
 
@@ -55,13 +88,19 @@
         // FF doesn't seem to support entry.isIntersecting properly,
         // so we check the intersectionRatio.
         if (entry.intersectionRatio < 1) {
-          fixableElements.forEach((el) => el.classList.add('js-fixed'));
+          fixables.forEach((el) => el.classList.add('js-fixed'));
         } else {
-          fixableElements.forEach((el) => el.classList.remove('js-fixed'));
+          fixables.forEach((el) => el.classList.remove('js-fixed'));
         }
       });
     }
 
+    /**
+     * Getting root margin on applying different classes.
+     *
+     * @return {int}
+     *   Get root margin by setting integer value..
+     */
     function getRootMargin() {
       let rootMarginTop = 72;
       const { body } = document;
@@ -80,6 +119,9 @@
       return `${rootMarginTop}px 0px 0px 0px`;
     }
 
+    /**
+     * Monitoring navigation position as per using root margin.
+     */
     function monitorNavPosition() {
       const primaryNav = document.querySelector('.site-header');
       const options = {
@@ -116,11 +158,11 @@
     if (e.keyCode === 27) {
       // Close the search form.
       if (
-        'toggleSearchVisibility' in Drupal.olivero &&
-        'searchIsVisible' in Drupal.olivero &&
-        Drupal.olivero.searchIsVisible()
+        'toggleSearchVisibility' in drupalSettings.olivero &&
+        'searchIsVisible' in drupalSettings.olivero &&
+        drupalSettings.olivero.searchIsVisible()
       ) {
-        Drupal.olivero.toggleSearchVisibility(false);
+        drupalSettings.olivero.toggleSearchVisibility(false);
       }
       // Close the wide nav.
       else {
@@ -128,4 +170,4 @@
       }
     }
   });
-})(Drupal);
+})();
diff --git a/core/themes/olivero/js/scripts.js b/core/themes/olivero/js/scripts.js
index 0c22374..4cdb937 100644
--- a/core/themes/olivero/js/scripts.js
+++ b/core/themes/olivero/js/scripts.js
@@ -5,15 +5,17 @@
 * @preserve
 **/
 
-(function (Drupal) {
-  Drupal.olivero = {};
+(function () {
+  window.drupalSettings = window.drupalSettings || {};
+  window.drupalSettings.olivero = window.drupalSettings.olivero || {};
+  document.documentElement.classList.add('js');
 
   function isDesktopNav() {
     var navButtons = document.querySelector('.mobile-buttons');
     return window.getComputedStyle(navButtons).getPropertyValue('display') === 'none';
   }
 
-  Drupal.olivero.isDesktopNav = isDesktopNav;
+  drupalSettings.olivero.isDesktopNav = isDesktopNav;
   var wideNavButton = document.querySelector('.nav-primary__button');
   var siteHeaderFixable = document.querySelector('.site-header__fixable');
 
@@ -36,17 +38,17 @@
   }
 
   if ('IntersectionObserver' in window && 'IntersectionObserverEntry' in window && 'intersectionRatio' in window.IntersectionObserverEntry.prototype) {
-    var fixableElements = document.querySelectorAll('.fixable');
+    var fixables = document.querySelectorAll('.fixable');
 
     function toggleDesktopNavVisibility(entries) {
       if (!isDesktopNav()) return;
       entries.forEach(function (entry) {
         if (entry.intersectionRatio < 1) {
-          fixableElements.forEach(function (el) {
+          fixables.forEach(function (el) {
             return el.classList.add('js-fixed');
           });
         } else {
-          fixableElements.forEach(function (el) {
+          fixables.forEach(function (el) {
             return el.classList.remove('js-fixed');
           });
         }
@@ -93,11 +95,11 @@
 
   document.addEventListener('keyup', function (e) {
     if (e.keyCode === 27) {
-      if ('toggleSearchVisibility' in Drupal.olivero && 'searchIsVisible' in Drupal.olivero && Drupal.olivero.searchIsVisible()) {
-        Drupal.olivero.toggleSearchVisibility(false);
+      if ('toggleSearchVisibility' in drupalSettings.olivero && 'searchIsVisible' in drupalSettings.olivero && drupalSettings.olivero.searchIsVisible()) {
+        drupalSettings.olivero.toggleSearchVisibility(false);
       } else {
           hideWideNav();
         }
     }
   });
-})(Drupal);
\ No newline at end of file
+})();
\ No newline at end of file
diff --git a/core/themes/olivero/js/search.es6.js b/core/themes/olivero/js/search.es6.js
index 6c17e88..225f249 100644
--- a/core/themes/olivero/js/search.es6.js
+++ b/core/themes/olivero/js/search.es6.js
@@ -1,12 +1,21 @@
-((Drupal) => {
+(() => {
   const searchWideButton = document.querySelector('.header-nav__search-button');
   const searchWideWrapper = document.querySelector('.search-wide__wrapper');
 
+  /**
+   * Checks if search is contains "is-active" class.
+   *
+   * @return {boolean}
+   *   True if navWrapper contains "is-active" class, false if not.
+   */
   function searchIsVisible() {
     return searchWideWrapper.classList.contains('is-active');
   }
-  Drupal.olivero.searchIsVisible = searchIsVisible;
+  drupalSettings.olivero.searchIsVisible = searchIsVisible;
 
+  /**
+   * Show focus on input search element.
+   */
   function handleFocus() {
     if (searchIsVisible()) {
       searchWideWrapper.querySelector('input[type="search"]').focus();
@@ -15,6 +24,12 @@
     }
   }
 
+  /**
+   * Show toggle search visibility by using add or remove "is-active" class.
+   *
+   * @param {bool} visibility
+   *   Toggle search visibility.
+   */
   function toggleSearchVisibility(visibility) {
     searchWideButton.setAttribute('aria-expanded', visibility === true);
     searchWideWrapper.addEventListener('transitionend', handleFocus, {
@@ -28,7 +43,7 @@
     }
   }
 
-  Drupal.olivero.toggleSearchVisibility = toggleSearchVisibility;
+  drupalSettings.olivero.toggleSearchVisibility = toggleSearchVisibility;
 
   document.addEventListener('click', (e) => {
     if (
@@ -44,4 +59,4 @@
       toggleSearchVisibility(false);
     }
   });
-})(Drupal);
+})();
diff --git a/core/themes/olivero/js/search.js b/core/themes/olivero/js/search.js
index 94bd72d..019d6c5 100644
--- a/core/themes/olivero/js/search.js
+++ b/core/themes/olivero/js/search.js
@@ -5,7 +5,7 @@
 * @preserve
 **/
 
-(function (Drupal) {
+(function () {
   var searchWideButton = document.querySelector('.header-nav__search-button');
   var searchWideWrapper = document.querySelector('.search-wide__wrapper');
 
@@ -13,7 +13,7 @@
     return searchWideWrapper.classList.contains('is-active');
   }
 
-  Drupal.olivero.searchIsVisible = searchIsVisible;
+  drupalSettings.olivero.searchIsVisible = searchIsVisible;
 
   function handleFocus() {
     if (searchIsVisible()) {
@@ -36,7 +36,7 @@
     }
   }
 
-  Drupal.olivero.toggleSearchVisibility = toggleSearchVisibility;
+  drupalSettings.olivero.toggleSearchVisibility = toggleSearchVisibility;
   document.addEventListener('click', function (e) {
     if (e.target.matches('.header-nav__search-button, .header-nav__search-button *')) {
       toggleSearchVisibility(!searchIsVisible());
@@ -44,4 +44,4 @@
       toggleSearchVisibility(false);
     }
   });
-})(Drupal);
\ No newline at end of file
+})();
\ No newline at end of file
diff --git a/core/themes/olivero/js/second-level-navigation.es6.js b/core/themes/olivero/js/second-level-navigation.es6.js
index 48896c8..a706ab8 100644
--- a/core/themes/olivero/js/second-level-navigation.es6.js
+++ b/core/themes/olivero/js/second-level-navigation.es6.js
@@ -1,5 +1,10 @@
-((Drupal) => {
-  const { isDesktopNav } = Drupal.olivero;
+/**
+ * @file
+ * Provides JS for second level submenu navigation.
+ */
+
+(() => {
+  const { isDesktopNav } = drupalSettings.olivero;
   const secondLevelNavMenus = document.querySelectorAll(
     '.primary-nav__menu-item--has-children',
   );
@@ -32,10 +37,9 @@
     }
   }
 
-  Drupal.olivero.toggleSubNav = toggleSubNav;
+  drupalSettings.olivero.toggleSubNav = toggleSubNav;
 
-  // Add hover and click event listeners onto each sub navigation parent and its
-  // button.
+  // Add hover and click event listeners onto each subnav parent and it's button.
   secondLevelNavMenus.forEach((el) => {
     const button = el.querySelector(
       '.primary-nav__button-toggle, .primary-nav__menu-link--button',
@@ -63,7 +67,7 @@
   });
 
   /**
-   * Close all second level sub navigation menus.
+   * Close all second level subnav menus.
    */
   function closeAllSubNav() {
     secondLevelNavMenus.forEach((el) => {
@@ -71,13 +75,13 @@
     });
   }
 
-  Drupal.olivero.closeAllSubNav = closeAllSubNav;
+  drupalSettings.olivero.closeAllSubNav = closeAllSubNav;
 
   /**
-   * Checks if any sub navigation items are currently active.
-   * @return {boolean} If sub nav is currently open.
+   * Checks if any subnavigation items are currently active.
+   * @return {boolean} If subnav is currently open.
    */
-  function areAnySubNavsOpen() {
+  function areAnySubnavsOpen() {
     let subNavsAreOpen = false;
 
     secondLevelNavMenus.forEach((el) => {
@@ -92,7 +96,7 @@
     return subNavsAreOpen;
   }
 
-  Drupal.olivero.areAnySubNavsOpen = areAnySubNavsOpen;
+  drupalSettings.olivero.areAnySubnavsOpen = areAnySubnavsOpen;
 
   // Ensure that desktop submenus close when ESC key is pressed.
   document.addEventListener('keyup', (e) => {
@@ -100,4 +104,4 @@
       closeAllSubNav();
     }
   });
-})(Drupal);
+})();
diff --git a/core/themes/olivero/js/second-level-navigation.js b/core/themes/olivero/js/second-level-navigation.js
index 273cf8b..13f75e6 100644
--- a/core/themes/olivero/js/second-level-navigation.js
+++ b/core/themes/olivero/js/second-level-navigation.js
@@ -5,8 +5,8 @@
 * @preserve
 **/
 
-(function (Drupal) {
-  var isDesktopNav = Drupal.olivero.isDesktopNav;
+(function () {
+  var isDesktopNav = drupalSettings.olivero.isDesktopNav;
   var secondLevelNavMenus = document.querySelectorAll('.primary-nav__menu-item--has-children');
 
   function toggleSubNav(topLevelMenuITem, toState) {
@@ -22,7 +22,7 @@
     }
   }
 
-  Drupal.olivero.toggleSubNav = toggleSubNav;
+  drupalSettings.olivero.toggleSubNav = toggleSubNav;
   secondLevelNavMenus.forEach(function (el) {
     var button = el.querySelector('.primary-nav__button-toggle, .primary-nav__menu-link--button');
     button.removeAttribute('aria-hidden');
@@ -49,9 +49,9 @@
     });
   }
 
-  Drupal.olivero.closeAllSubNav = closeAllSubNav;
+  drupalSettings.olivero.closeAllSubNav = closeAllSubNav;
 
-  function areAnySubNavsOpen() {
+  function areAnySubnavsOpen() {
     var subNavsAreOpen = false;
     secondLevelNavMenus.forEach(function (el) {
       var button = el.querySelector('.primary-nav__button-toggle');
@@ -64,10 +64,10 @@
     return subNavsAreOpen;
   }
 
-  Drupal.olivero.areAnySubNavsOpen = areAnySubNavsOpen;
+  drupalSettings.olivero.areAnySubnavsOpen = areAnySubnavsOpen;
   document.addEventListener('keyup', function (e) {
     if (e.keyCode === 27 && isDesktopNav()) {
       closeAllSubNav();
     }
   });
-})(Drupal);
\ No newline at end of file
+})();
\ No newline at end of file
diff --git a/core/themes/olivero/js/tabs.es6.js b/core/themes/olivero/js/tabs.es6.js
index ce29438..3e118cc 100644
--- a/core/themes/olivero/js/tabs.es6.js
+++ b/core/themes/olivero/js/tabs.es6.js
@@ -1,13 +1,36 @@
+/**
+ * @file
+ * Provide JS for expanded tabs.
+ */
+
 ((Drupal) => {
+  /**
+   * Init function for checking expanding tabs using "is-active" class.
+   *
+   * @param {object} el
+   *   Tabs for el.
+   */
   function init(el) {
     const tabs = el.querySelector('.tabs');
     const expandedClass = 'is-expanded';
     const activeTab = tabs.querySelector('.is-active');
 
+    /**
+     * Checks if tabs are expanding for mobile layouts.
+     *
+     * @return {int}
+     *   Check value is greater then 0 for trigger tabs.
+     */
     function isTabsMobileLayout() {
       return tabs.querySelector('.tabs__trigger').clientHeight > 0;
     }
 
+    /**
+     * Check if tabs are expanded or not using add or remove "expandedClass".
+     *
+     * @param {object} e
+     *   Using object set the attribute value as "true" or "false".
+     */
     function handleTriggerClick(e) {
       if (!tabs.classList.contains(expandedClass)) {
         e.currentTarget.setAttribute('aria-expanded', 'true');
@@ -30,6 +53,14 @@
       .addEventListener('click', handleTriggerClick);
   }
 
+  /**
+   * Attaches the navigation tabs.
+   *
+   * @type {object}
+   *
+   * @prop {object} attach
+   *   Attach context for navigation tabs.
+   */
   Drupal.behaviors.tabs = {
     attach(context) {
       context
